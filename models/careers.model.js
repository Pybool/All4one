const mongoose = require("mongoose");

const applicationSchema = new mongoose.Schema({
  applicantId: { type: String, required: false },
  firstName: { type: String, required: false },
  lastName: { type: String, required: false },
  email: { type: String, required: false },
  phone: { type: String, required: false },
  homeTelephone: { type: String, required: false },
  nin: { type: String, required: false },
  address: { type: String, required: false },
  permanentAddress: { type: String, required: false },
  dob: { type: String, required: false },
  british_passport: { type: Boolean, default: false, required: false },
  passport_showing_right_to_live: {
    type: Boolean,
    default: false,
    required: false,
  },
  non_eu_passport: { type: Boolean, default: false, required: false },
  certificate_of_registration: {
    type: Boolean,
    default: false,
    required: false,
  },
  eec_passport: { type: Boolean, default: false, required: false },
  other_doc: { type: Boolean, default: false, required: false },
  ukdrivingLicence: { type: Boolean, default: false, required: false },
  hasWorkVehicle: { type: Boolean, default: false, required: false },
  message: { type: String, required: false },
  bookedHolidays: { type: String, required: false },
  workHours: { type: Number, required: false },
  likeToWorkLocation: { type: String, required: false },
  recommendedBy: { type: String, required: false },
  outstandingAllegations: { type: Boolean, default: false, required: false },
  unspentConvictions: { type: Boolean, default: false, required: false },
  pendingDisciplinaryAction: { type: Boolean, default: false, required: false },
  workHoursConsent: { type: Boolean, default: false, required: false },
  dbsAccurateDocs: { type: Boolean, default: false, required: false },
  dbsAuthorizedApplication: { type: Boolean, default: false, required: false },
  dbsReadPrivacyPolicy: { type: Boolean, default: false, required: false },
  dbsConsentElectronicResult: {
    type: Boolean,
    default: false,
    required: false,
  },
  school1: { type: String, required: false },
  school1Qualification: { type: String, required: false },
  school2: { type: String, required: false },
  school2Qualification: { type: String, required: false },
  workplace1EmployerName: { type: String, required: false },
  workPlace1Position: { type: String, required: false },
  workPlace1RateOfPay: { type: Number, required: false },
  workPlace1DateOfEmployment: { type: Date, required: false },
  workPlace1Duties: { type: String, required: false },
  workPlace1ReasonLeft: { type: String, required: false },
  workPlace1ManagersName: { type: String, required: false },
  workPlace1ManagersPhone: { type: String, required: false },
  workPlace1ManagersEmail: { type: String, required: false },
  workplace2EmployerName: { type: String, required: false },
  workPlace2Position: { type: String, required: false },
  workPlace2RateOfPay: { type: Number, required: false },
  workPlace2DateOfEmployment: { type: Date, required: false },
  workPlace2Duties: { type: String, required: false },
  workPlace2ReasonLeft: { type: String, required: false },
  workPlace2ManagersName: { type: String, required: false },
  workPlace2ManagersPhone: { type: String, required: false },
  workPlace2ManagersEmail: { type: String, required: false },
  workplace3EmployerName: { type: String, required: false },
  workPlace3Position: { type: String, required: false },
  workPlace3RateOfPay: { type: Number, required: false },
  workPlace3DateOfEmployment: { type: Date, required: false },
  workPlace3Duties: { type: String, required: false },
  workPlace3ReasonLeft: { type: String, required: false },
  workPlace3ManagersName: { type: String, required: false },
  workPlace3ManagersPhone: { type: String, required: false },
  workPlace3ManagersEmail: { type: String, required: false },
  lengthOfGap: { type: Number, required: false },
  workGapBetween: { type: String, required: false },
  workGapReason: { type: String, required: false },
  guarantorName: { type: String, required: false },
  guarantorPhone: { type: String, required: false },
  guarantorEmail: { type: String, required: false },
  howDoUKnowGuarantor: { type: String, required: false },
  guarantor2Name: { type: String, required: false },
  guarantor2Phone: { type: String, required: false },
  guarantor2Email: { type: String, required: false },
  howDoUKnowGuarantor2: { type: String, required: false },
  nokName: { type: String, required: false },
  nokAddress: { type: String, required: false },
  nokPhone: { type: String, required: false },
  nokRelationship: { type: String, required: false },
  signature: { type: String, required: false },
  signatoryDate: { type: Date, required: false },
  isComplete: { type: Boolean, default: false },
});

const Application = mongoose.model("Application", applicationSchema);

module.exports = Application;
